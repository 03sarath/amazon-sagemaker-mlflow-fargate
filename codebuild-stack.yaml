# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ProjectName:
    Type: String
    Default: mlflow

Mappings:
  RegionMap:
    us-east-1:
      "bucket": "sagemaker-mlflow-us-east-1/mlflow.zip"
    us-west-1:
      "bucket": "sagemaker-mlflow-us-west-1/mlflow.zip"
    eu-west-1:
      "bucket": "sagemaker-mlflow-eu-west-1/mlflow.zip"

Resources:
  #================================================================================
  # CODEBUILD
  #================================================================================
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${ProjectName}-build
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: PROJECT_NAME
            Value: !Ref ProjectName
          - Name: ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_REGION
            Value: !Ref AWS::Region
      ServiceRole: !GetAtt IamRole.Arn
      Source:
        Type: S3
        Location: !FindInMap [RegionMap, !Ref "AWS::Region", bucket]
        BuildSpec: stack/buildspec.yaml
      TimeoutInMinutes: 60

  #================================================================================
  # LAMBDA TRIGGER
  #================================================================================
  CodeBuildRun:
    Type: Custom::CodeBuildRun
    DependsOn: CodeBuildLambda
    Properties:
      ServiceToken: !GetAtt CodeBuildLambda.Arn
      BuildProjectName: !Ref CodeBuild

  CodeBuildLambda:
    Type: AWS::Lambda::Function
    DependsOn: CodeBuild
    Properties:
      Code:
        ZipFile: !Sub |
          import os
          import json
          import boto3
          import logging
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          CODEBUILD_PROJECT = os.environ['CODEBUILD_PROJECT']
          build = boto3.client('codebuild')

          def lambda_handler(event, context):
            logger.info('got event {}'.format(event))
            responseData = {}

            try:
              if event['RequestType'] in ("Create", "Update"):
                try:
                    logging.info("Kicking off Build")
                    response = build.start_build(projectName=CODEBUILD_PROJECT)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, responseData)
                except Exception as e:
                    logging.error(e)
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData, responseData)
              elif event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, responseData)
              else:
                  # Invalid RequestType
                  logging.error("ERROR: Invalid request type send error signal to cfn")
                  logging.error("ERROR: Expected - Create, Update, Delete")

            except Exception as unhandled:
                responseData['message'] = f'Unhandled exception, failing gracefully:{str(unhandled)}'
                cfnresponse.send(event, context, cfnresponse.FAILED, responseData, responseData)

      FunctionName: !Sub ${ProjectName}-codebuild-trigger
      Handler: index.lambda_handler
      Runtime: python3.6
      Timeout: 60
      Environment:
        Variables:
          CODEBUILD_PROJECT: !Sub ${ProjectName}-build
      Role: !GetAtt IamRole.Arn
  #================================================================================
  # IAM
  #================================================================================
  IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - codebuild.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess